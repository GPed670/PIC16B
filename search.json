[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog!",
    "section": "",
    "text": "This is the first post in my Quarto blog. Welcome!\n\nThis is a photo I took in Kauai, Hawaii this past summer."
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "Homework 1: Data Wrangling and Visualization using NOAA Climate Data",
    "section": "",
    "text": "import pandas as pd\nimport sqlite3"
  },
  {
    "objectID": "posts/hw1/index.html#visualization-1-average-temperature-over-time",
    "href": "posts/hw1/index.html#visualization-1-average-temperature-over-time",
    "title": "Homework 1: Data Wrangling and Visualization using NOAA Climate Data",
    "section": "Visualization 1: Average Temperature Over Time",
    "text": "Visualization 1: Average Temperature Over Time\n\ndef avgTemp_over_time(db_file, country, year_begin, year_end):\n    # Connect to the SQLite database\n    conn = sqlite3.connect(db_file)\n    \n    query = f\"\"\"\n        SELECT t.Year, AVG(t.Temp) AS avg_temp\n        FROM temperatures t\n        LEFT JOIN stations s ON t.ID = s.ID\n        LEFT JOIN countries c ON t.ID LIKE c.\"FIPS 10-4\" || '%'\n        WHERE c.Name = '{country}' AND Year BETWEEN {year_begin} AND {year_end}\n        GROUP BY year\n    \"\"\"\n    \n    # Execute the query and fetch the results into a Pandas DataFrame\n    df = pd.read_sql_query(query, conn)\n    conn.close()\n    \n    return df\n\ndef average_temperature_line_plot(db_file, country, year_begin, year_end):\n    # Get data using the query function\n    data = avgTemp_over_time(db_file, country, year_begin, year_end)\n\n    # Create line plot with facets using Plotly Express\n    fig = px.line(data, \n                  x='Year', \n                  y='avg_temp',\n                  labels={'avg_temp': 'Average Temperature (°C)'},\n                  title=f'Average Temperature Over Time in {country} ({year_begin}-{year_end})')\n\n    return fig\n\n\nfig_line = average_temperature_line_plot(\"climate.db\", \"Thailand\", 1980, 2020)\nfig_line.show()"
  },
  {
    "objectID": "posts/hw1/index.html#visualization-2-bar-chart-of-average-temperatures-each-month",
    "href": "posts/hw1/index.html#visualization-2-bar-chart-of-average-temperatures-each-month",
    "title": "Homework 1: Data Wrangling and Visualization using NOAA Climate Data",
    "section": "Visualization 2: Bar Chart of Average Temperatures Each Month",
    "text": "Visualization 2: Bar Chart of Average Temperatures Each Month\n\ndef avg_monthly_temperature_bar_chart(db_file, country, year_begin, year_end):\n    # Connect to the SQLite database\n    conn = sqlite3.connect(db_file)\n\n    query = f\"\"\"\n        SELECT t.Month, AVG(t.Temp) AS avg_temp\n        FROM temperatures t\n        LEFT JOIN stations s ON t.ID = s.ID\n        LEFT JOIN countries c ON t.ID LIKE c.\"FIPS 10-4\" || '%'\n        WHERE c.Name = '{country}' AND Year BETWEEN {year_begin} AND {year_end}\n        GROUP BY t.Month\n    \"\"\"\n\n    # Execute the query and fetch the results into a Pandas DataFrame\n    df = pd.read_sql_query(query, conn)\n    conn.close()\n\n    # Map month numbers to month names for better visualization\n    month_mapping = {\n        1: 'January', 2: 'February', 3: 'March', 4: 'April',\n        5: 'May', 6: 'June', 7: 'July', 8: 'August',\n        9: 'September', 10: 'October', 11: 'November', 12: 'December'\n    }\n    df['Month'] = df['Month'].map(month_mapping)\n\n    # Create a bar chart using Plotly\n    fig = px.bar(df, \n                 x='Month', \n                 y='avg_temp',\n                 labels={'avg_temp': 'Average Temperature (°C)'},\n                 title=f'Average Monthly Temperature in {country} ({year_begin}-{year_end})',\n                 color='avg_temp',\n                 color_continuous_scale='RdBu_r')\n\n    return fig\n\nIn summary, this script connects to our SQLite database, fetches average monthly temperature data for a specified country and year range, and creates an interactive bar chart using Plotly, where the color of each bar represents the temperature value. The resulting visualization provides an representation of how average monthly temperatures vary over time for the selected country.\nThis visualization could help answer the question “How does the average monthly temperature vary over the specified years for a particular country?” This visualization provides insights into the monthly temperature patterns for a given country, allowing users to observe the seasonal temperature changes. By examining the color of the bars, viewers can identify periods of higher or lower average temperatures throughout the specified time range.\nBelow is an example for the function in use to find the average temperatures of each month in Finland between 2000 and 2020:\n\nfig = avg_monthly_temperature_bar_chart('climate.db', 'Finland', 2000, 2020)\nfig.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Myblog",
    "section": "",
    "text": "Homework 1: Data Wrangling and Visualization using NOAA Climate Data\n\n\n\n\n\n\nweek 3\n\n\nhomework\n\n\n\n\n\n\n\n\n\nJan 25, 2024\n\n\nGianna Pedroza\n\n\n\n\n\n\n\n\n\n\n\n\nTutorial: Constructing a Data Visualization of the Palmer Penguins Dataset\n\n\n\n\n\n\nweek 0\n\n\nexample\n\n\n\n\n\n\n\n\n\nJan 17, 2024\n\n\nGianna Pedroza\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog!\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 16, 2024\n\n\nGianna Pedroza\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 11, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Gianna Pedroza",
    "section": "",
    "text": "University of California, Los Angeles | Los Angeles, CA B.S. in Applied Mathematics, Data Science Engineering Minor | Sept 2021 - Present"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Gianna Pedroza",
    "section": "",
    "text": "University of California, Los Angeles | Los Angeles, CA B.S. in Applied Mathematics, Data Science Engineering Minor | Sept 2021 - Present"
  },
  {
    "objectID": "posts/hw0/index.html",
    "href": "posts/hw0/index.html",
    "title": "Tutorial: Constructing a Data Visualization of the Palmer Penguins Dataset",
    "section": "",
    "text": "Data visualization is an important skill for understanding and drawing insight from datasets. The Palmer Penguins dataset contains data on 344 penguins of three different species within the Palmer Archipelago in Antarctica. In this tutorial, we will explore how to create an interesting data visualization pf the Palmer Penguins dataset using Python."
  },
  {
    "objectID": "posts/hw0/index.html#step-1-import-libraries-and-load-the-dataset",
    "href": "posts/hw0/index.html#step-1-import-libraries-and-load-the-dataset",
    "title": "Tutorial: Constructing a Data Visualization of the Palmer Penguins Dataset",
    "section": "Step 1: Import Libraries and Load the Dataset",
    "text": "Step 1: Import Libraries and Load the Dataset\nWe want to import the pandas library in order to create a Dataframe class object containing all of the information from the palmer_penguins.csv file that we are downloading directly from the given url. Then, we need matplotlib in order to create our visualization. Other libraries can be used for visualizing the data besides matplotlib, but this is the most well known.\n\nimport pandas as pd # Contains the class DataFrame\nimport matplotlib.pyplot as plt # For creating simple graphs\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\n\nA csv file is a file formated to contain data that is seperated by commas for the different collumns. We can easily create a pandas DataFrame object by reading in a csv file of the Palmer Penguins dataset from the url given above.\nAdditionally we want to add names for the columns:\n\ncols = [\"Species\", \"Island\", \"Sex\", \"Culmen Length (mm)\", \"Culmen Depth (mm)\", \"Flipper Length (mm)\", \"Body Mass (g)\"]\npenguins = penguins[cols]"
  },
  {
    "objectID": "posts/hw0/index.html#step-2-explore-and-clean-the-data",
    "href": "posts/hw0/index.html#step-2-explore-and-clean-the-data",
    "title": "Tutorial: Constructing a Data Visualization of the Palmer Penguins Dataset",
    "section": "Step 2: Explore and Clean the Data",
    "text": "Step 2: Explore and Clean the Data\nBefore creating a visualization, it’s essential to understand the structure and contents of the dataset. First, we want to simply take a look at the database we have created in order to determine if any rows or columns need to be cleaned.\n\npenguins.head() #Shows the first five rows of the dataframe\n\n\n\n\n\n\n\n\nSpecies\nIsland\nSex\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\n\n\n\n\n0\nAdelie Penguin (Pygoscelis adeliae)\nTorgersen\nMALE\n39.1\n18.7\n181.0\n3750.0\n\n\n1\nAdelie Penguin (Pygoscelis adeliae)\nTorgersen\nFEMALE\n39.5\n17.4\n186.0\n3800.0\n\n\n2\nAdelie Penguin (Pygoscelis adeliae)\nTorgersen\nFEMALE\n40.3\n18.0\n195.0\n3250.0\n\n\n3\nAdelie Penguin (Pygoscelis adeliae)\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAdelie Penguin (Pygoscelis adeliae)\nTorgersen\nFEMALE\n36.7\n19.3\n193.0\n3450.0\n\n\n\n\n\n\n\nThen, we need to clean out any empty datapoints using the dropna method, and we want to make the dataframe easier to read by simplifying the species name.\n\npenguins = penguins.dropna(subset = [\"Body Mass (g)\", \"Sex\"])\npenguins[\"Species\"] = penguins[\"Species\"].str.split().str.get(0)\npenguins.head()\n\n\n\n\n\n\n\n\nSpecies\nIsland\nSex\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\n\n\n\n\n0\nAdelie\nTorgersen\nMALE\n39.1\n18.7\n181.0\n3750.0\n\n\n1\nAdelie\nTorgersen\nFEMALE\n39.5\n17.4\n186.0\n3800.0\n\n\n2\nAdelie\nTorgersen\nFEMALE\n40.3\n18.0\n195.0\n3250.0\n\n\n4\nAdelie\nTorgersen\nFEMALE\n36.7\n19.3\n193.0\n3450.0\n\n\n5\nAdelie\nTorgersen\nMALE\n39.3\n20.6\n190.0\n3650.0\n\n\n\n\n\n\n\nAdditionally, often times data sets contain columns that are not relevant to our study or visualization so they can be deleted from the dataframe for simplicity. In this case, we will keep all of the columns for the different examples given below."
  },
  {
    "objectID": "posts/hw0/index.html#step-3-choose-an-appropriate-method-of-visualization",
    "href": "posts/hw0/index.html#step-3-choose-an-appropriate-method-of-visualization",
    "title": "Tutorial: Constructing a Data Visualization of the Palmer Penguins Dataset",
    "section": "Step 3: Choose an Appropriate Method of Visualization",
    "text": "Step 3: Choose an Appropriate Method of Visualization\nFor the visualization, there are many different options. Your visualization should be based off of what you are trying to analyze in the data. For example, let’s say that I want to compare the size of the culmen of the three different species. For this, I will be using a scatter plot to visualize the clustering of the three groups.\nFirst, I will create a dictionary of the species and colors they should be associated with. Then, I will create a scatter plot for each species. Also, I want to add some additional features to the scatter plot, axis labels, and a title. This makes the graph easier to read and visually appealing.\n\n# library with associated species and colors\ncolors = {'Adelie': 'blue', 'Chinstrap': 'orange', 'Gentoo': 'green'}\n\n# Create and individual scatter plot for each species\nfor species, col in colors.items():\n    species_data = penguins[penguins['Species'] == species]\n    plt.scatter(species_data['Culmen Length (mm)'], species_data['Culmen Depth (mm)'], label=species, color=col)\n\n# Add aditional features to the plot\nplt.legend(title='Species')\nplt.title('Culmen Size of Penguin Species')\nplt.xlabel('Culmen Length (mm)')\nplt.ylabel('Culmen Depth (mm)')\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\nAlternatively, I could also choose to compare the different body masses of each species using a box plot. First, I will need to import a library that could help me do this, like plotly. Then I can use the box method to create a box plot with the Species as the x-axis and the body mass as the y-axis.\n\n# import the relevant library\nimport plotly.express as px\n\n# Create the box plot and add a title\nbox = px.box(penguins, x = 'Species', y = 'Body Mass (g)', color = 'Species')\nbox.update_layout(title_text=\"Body Mass Distribution of Penguin Species\")\n\n# Show the plot\nbox.show()"
  },
  {
    "objectID": "posts/hw0/index.html#conclusion",
    "href": "posts/hw0/index.html#conclusion",
    "title": "Tutorial: Constructing a Data Visualization of the Palmer Penguins Dataset",
    "section": "Conclusion",
    "text": "Conclusion\nOverall, you can make many different types of interesting visualization from this dataset that can help you draw different insight. Choosing the right visualization depends on what you’re trying to find, and there are many different libraries and graphs that can help you with that. Once your visualization is created, interpret the results and analyze any patterns or trends observed from the visualization. Feel free to experiment with other types of visualizations and variables from the dataset to create a comprehensive understanding of the data. Remember to share your findings and insights in a clear and concise manner by making your visualizations easy to read and visibly satisfying. Data visualization is not only about creating beautiful plots but also about effectively communicating information."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  }
]